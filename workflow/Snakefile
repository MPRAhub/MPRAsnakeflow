#################
#### imports ####
#################
import pandas as pd

##################
#### SETTINGS ####
##################

##### check snakemake min version #####
from snakemake.utils import min_version

min_version("7.2.1")

##### load config and sample sheets #####
from snakemake.utils import validate


# configfile: "config/config.yaml"


validate(config, schema="schemas/config.schema.yaml")

from snakemake.workflow import srcdir

SCRIPTS_DIR = srcdir("scripts")


def getScript(name):
    return "%s/%s" % (SCRIPTS_DIR, name)


##### report workflow #####
report: "report/workflow.rst"


##### General wirldcard constrains #####
wildcard_constraints:
    project="[^/]+",
    assignment="[^/]+",
    condition="[^/]+",


##### localrules #####
localrules:
    all,
    aggregate_demultiplex,


################################
#### HELPERS AND EXCEPTIONS ####
################################


##### Exceptions #####
class MissingAssignmentInConfigException(Exception):
    """
    Exception raised for if no assignment file is set in the config.

    Args:
        Exception ([type]): Exception class cast

    Attributes:
        config_name (string): name of the configuration which assignment is missing.
    """

    def __init__(self, config_name):
        self.config_name = config_name

    def __str__(self):
        return "Config %s has no assignment file defined!" % (self.config_name)


class MissingVariantInConfigException(Exception):
    """
    Exception raised for if no variants config.

    Args:
        Exception ([type]): Exception class cast

    Attributes:
        config_name (string): name of the configuration which assignment is missing.
    """

    def __init__(self, config_name):
        self.config_name = config_name

    def __str__(self):
        return "Config %s has no variants defined!" % (self.config_name)


##### get helpers for different things (like Conditions etc) #####
def getAssignments():
    if "assignments" in config:
        return list(config["assignments"].keys())
    else:
        return []


def getAssignmentFile(project, assignment):
    if config["experiments"][project]["assignments"][assignment]["type"] == "file":
        return config["experiments"][project]["assignments"][assignment]["value"]
    if config["experiments"][project]["assignments"][assignment]["type"] == "config":
        conf = config["experiments"][project]["assignments"][assignment]["value"]
        return expand(
            "results/assignment/{assignment}/assignment_barcodes_incl_other.{config}.sorted.tsv.gz",
            assignment=assignment,
            config=conf,
        )


def getProjects():
    if "experiments" in config:
        return list(config["experiments"].keys())
    else:
        return []


def getExperiments(project):
    experiments = pd.read_csv(config["experiments"][project]["experiment_file"])
    return experiments


def getConditions(project):
    exp = getExperiments(project)
    return list(exp.Condition.unique())


def getProjectAssignments(project):
    if (
        "assignments" in config["experiments"][project]
        and len(config["experiments"][project]["assignments"]) > 0
    ):
        return list(config["experiments"][project]["assignments"].keys())
    else:
        raise MissingAssignmentInConfigException(project)


def getVariants(project):
    if "variants" in config["experiments"][project]:
        return config["experiments"][project]["variants"]
    else:
        raise MissingVariantInConfigException(project)


def getReplicatesOfCondition(project, condition):
    exp = getExperiments(project)
    exp = exp[exp.Condition == condition]
    return list(exp.Replicate.astype(str))


def getVariantsBCThreshold(project):
    return getVariants(project)["min_barcodes"]


def getFW(project, condition, replicate, rnaDna_type):
    exp = getExperiments(project)
    exp = exp[exp.Condition == condition]
    exp = exp[exp.Replicate.astype(str) == replicate]
    return "%s/%s" % (
        config["experiments"][project]["data_folder"],
        exp["%s_BC_F" % rnaDna_type].iloc[0],
    )


def getFWWithIndex(project):
    return [
        "%s%s" % (config["experiments"][project]["data_folder"], f)
        for f in getExperiments(project).BC_F.iloc[0].split(";")
    ]


def getRev(project, condition, replicate, rnaDna_type):
    exp = getExperiments(project)
    exp = exp[exp.Condition == condition]
    exp = exp[exp.Replicate.astype(str) == replicate]
    return "%s/%s" % (
        config["experiments"][project]["data_folder"],
        exp["%s_BC_R" % rnaDna_type].iloc[0],
    )


def getRevWithIndex(project):
    return [
        "%s%s" % (config["experiments"][project]["data_folder"], f)
        for f in getExperiments(project).BC_R.iloc[0].split(";")
    ]


def getUMI(project, condition, replicate, rnaDna_type):
    exp = getExperiments(project)
    exp = exp[exp.Condition == condition]
    exp = exp[exp.Replicate.astype(str) == replicate]
    return "%s/%s" % (
        config["experiments"][project]["data_folder"],
        exp["%s_UMI" % rnaDna_type].iloc[0],
    )


def getUMIWithIndex(project):
    return [
        config["experiments"][project]["data_folder"] + f
        for f in getExperiments(project).UMI.iloc[0].split(";")
    ]


def getIndexWithIndex(project):
    return [
        config["experiments"][project]["data_folder"] + f
        for f in getExperiments(project).INDEX.iloc[0].split(";")
    ]


def hasReplicates(project, condition=None):
    if condition == None:
        conditions = getConditions(project)
        for condition in conditions:
            if len(getReplicatesOfCondition(project, condition)) <= 1:
                return False
    else:
        return len(getReplicatesOfCondition(project, condition)) > 1
    return True


def getConfigs(project):
    return list(config["experiments"][project]["configs"].keys())


##### Helper to create output files #####
def getOutputConditionReplicateType_helper(file, project, skip={}):
    """
    Inserts {condition}, {replicate} and {type} from config into given file.
    Can skip projects with the given config set by skip.
    """
    output = []

    for key, value in skip.items():
        if config["experiments"][project][key] == value:
            return []
    conditions = getConditions(project)
    for condition in conditions:
        replicates = getReplicatesOfCondition(project, condition)
        output += expand(
            file,
            project=project,
            condition=condition,
            replicate=replicates,
            type=["RNA", "DNA"],
        )
    return output


def getOutputProjectConditionReplicateType_helper(file, skip={}):
    """
    Inserts {project}, {condition}, {replicate} and {type} from config into given file.
    Can skip projects with the given config set by skip.
    """
    output = []
    projects = getProjects()
    for project in projects:
        # skip projects with the following config
        output += getOutputConditionReplicateType_helper(
            expand(
                file,
                project=project,
                condition="{condition}",
                replicate="{replicate}",
                type="{type}",
            ),
            project,
            skip,
        )
    return output


def getOutputProjectConditionType_helper(file):
    """
    Inserts {project}, {condition} and {type} from config into given file.
    """
    output = []
    projects = getProjects()
    for project in projects:
        conditions = getConditions(project)
        for condition in conditions:
            output += expand(
                file,
                project=project,
                condition=condition,
                type=["DNA", "RNA"],
            )
    return output


def getOutputProjectConditionAssignmentConfig_helper(file):
    """
    Inserts {project}, {condition}, {assignment} and {config} (from configs of project) from config into given file.
    """
    output = []
    projects = getProjects()
    for project in projects:
        try:
            conditions = getConditions(project)
            for condition in conditions:
                output += expand(
                    file,
                    project=project,
                    condition=condition,
                    assignment=getProjectAssignments(project),
                    config=getConfigs(project),
                )
        except MissingAssignmentInConfigException:
            continue
    return output


def getOutputProjectAssignmentConfig_helper(file, betweenReplicates=False):
    """
    Inserts {project}, {assignment} and {config} (from configs of project) from config into given file.
    When betweenReplicates is True skips projects without replicates in one condition.
    """
    output = []
    projects = getProjects()
    for project in projects:
        if not betweenReplicates or hasReplicates(project):
            try:
                output += expand(
                    file,
                    project=project,
                    assignment=getProjectAssignments(project),
                    config=getConfigs(project),
                )
            except MissingAssignmentInConfigException:
                continue
    return output


def getOutputProjectConfig_helper(file, betweenReplicates=False):
    """
    Inserts {project}, {config} from config into given file.
    When betweenReplicates is True skips projects without replicates in one condition.
    """
    output = []
    projects = getProjects()
    for project in projects:
        if not betweenReplicates or hasReplicates(project):
            output += expand(
                file,
                project=project,
                config=getConfigs(project),
            )
    return output


def getOutputProjectAssignmentConfig_helper(file, betweenReplicates=False):
    """
    Inserts {project}, {assignment}, {config} from config into given file.
    When betweenReplicates is True skips projects without replicates in one condition.
    """
    output = []
    projects = getProjects()
    for project in projects:
        if not betweenReplicates or hasReplicates(project):
            try:
                output += expand(
                    file,
                    project=project,
                    assignment=getProjectAssignments(project),
                    config=getConfigs(project),
                )
            except MissingAssignmentInConfigException:
                continue
    return output


def getOutputVariants_helper(file, betweenReplicates=False):
    """
    Only when variants are set in config file
    Inserts {project}, {condition}, {assignment} and {config} (from configs of project) from config into given file.
    When betweenReplicates is True skips project/condition without replicates in a condition.
    """
    output = []
    projects = getProjects()
    for project in projects:
        conditions = getConditions(project)
        for condition in conditions:
            if "variants" in config["experiments"][project]:
                if hasReplicates(project, condition):
                    output += expand(
                        file,
                        project=project,
                        condition=condition,
                        assignment=getProjectAssignments(project),
                        config=list(config["experiments"][project]["configs"].keys()),
                    )
    return output


def getAssignment_helper(file):
    return expand(
        file,
        assignment=getAssignments(),
    )


def getAssignmentConfig_helper(file):
    output = []
    for assignment in getAssignments():
        output += expand(
            file,
            assignment=assignment,
            config=config["assignments"][assignment]["configs"].keys(),
        )
    return output


###################
#### ALL RULES ####
###################


rule all:
    input:
        ## assignments
        getAssignmentConfig_helper(
            "results/assignment/{assignment}/assignment_barcodes_incl_other.{config}.sorted.tsv.gz",
        ),
        getAssignment_helper(
            "results/assignment/{assignment}/stats/assignment/bam_stats.txt",
        ),
        ## experiments
        # stats BC nucleotide composition
        getOutputProjectConditionReplicateType_helper(
            "results/experiments/{project}/stats/counts/BCNucleotideComposition/{condition}_{replicate}_{type}.tsv.gz"
        ),
        # barcode stats
        expand(
            "results/experiments/{project}/stats/statistic_count_{countType}.tsv",
            project=getProjects(),
            countType=["raw", "filtered"],
        ),
        # counts stats
        getOutputProjectConditionReplicateType_helper(
            "results/experiments/{project}/stats/counts/freqUMIs_{condition}_{replicate}_{type}.txt"
        ),
        getOutputProjectConfig_helper(
            "results/experiments/{project}/stats/statistic_bc_correlation_merged_{config}.tsv",
            True,
        ),
        getOutputProjectAssignmentConfig_helper(
            "results/experiments/{project}/stats/statistic_assigned_bc_correlation_merged_{assignment}_{config}.tsv",
            True,
        ),
        getOutputProjectConfig_helper(
            "results/experiments/{project}/stats/statistic_overlapBCs_counts_{config}.tsv",
            True,
        ),
        # assignment
        getOutputProjectConditionAssignmentConfig_helper(
            "results/experiments/{project}/assigned_counts/{assignment}/{config}/{condition}_allreps_merged.tsv.gz"
        ),
        # assignment stats
        getOutputProjectAssignmentConfig_helper(
            "results/experiments/{project}/stats/statistic_assigned_counts_merged_{assignment}_{config}.tsv"
        ),
        getOutputProjectAssignmentConfig_helper(
            "results/experiments/{project}/stats/statistic_oligo_correlation_merged_{assignment}_{config}.tsv",
            True,
        ),
        getOutputProjectAssignmentConfig_helper(
            "results/experiments/{project}/stats/statistic_assigned_counts_single_{assignment}_{config}.tsv",
            True,
        ),
        getOutputProjectAssignmentConfig_helper(
            "results/experiments/{project}/stats/statistic_overlapBCs_assigned_counts_{assignment}_{config}.tsv",
            True,
        ),
        # variants
        getOutputVariants_helper(
            "results/experiments/{project}/stats/variants/{assignment}/{config}/correlation_variantTable.tsv",
            True,
        ),


rule all_assignments:
    input:
        getAssignmentConfig_helper(
            "results/assignment/{assignment}/assignment_barcodes_incl_other.{config}.sorted.tsv.gz",
        ),
        getAssignment_helper(
            "results/assignment/{assignment}/stats/assignment/bam_stats.txt",
        ),


rule all_experiments:
    input:
        # stats BC nucleotide composition
        getOutputProjectConditionReplicateType_helper(
            "results/experiments/{project}/stats/counts/BCNucleotideComposition/{condition}_{replicate}_{type}.tsv.gz"
        ),
        # counts
        getOutputProjectConditionReplicateType_helper(
            "results/experiments/{project}/counts/{condition}_{replicate}_{type}.bam",
            skip={"demultiplex": True},
        ),
        getOutputProjectConditionReplicateType_helper(
            "results/experiments/{project}/counts/{condition}_{replicate}_{type}_final_counts.tsv.gz"
        ),
        # barcode stats
        expand(
            "results/experiments/{project}/stats/statistic_count_{countType}.tsv",
            project=getProjects(),
            countType=["raw", "filtered"],
        ),
        # counts stats
        getOutputProjectConditionReplicateType_helper(
            "results/experiments/{project}/stats/counts/freqUMIs_{condition}_{replicate}_{type}.txt"
        ),
        getOutputProjectConfig_helper(
            "results/experiments/{project}/stats/statistic_bc_correlation_merged_{config}.tsv",
            True,
        ),
        getOutputProjectAssignmentConfig_helper(
            "results/experiments/{project}/stats/statistic_assigned_bc_correlation_merged_{assignment}_{config}.tsv",
            True,
        ),
        getOutputProjectConfig_helper(
            "results/experiments/{project}/stats/statistic_overlapBCs_counts_{config}.tsv",
            True,
        ),
        # assignment
        getOutputProjectConditionAssignmentConfig_helper(
            "results/experiments/{project}/assigned_counts/{assignment}/{config}/{condition}_allreps_merged.tsv.gz"
        ),
        # assignment stats
        getOutputProjectAssignmentConfig_helper(
            "results/experiments/{project}/stats/statistic_assigned_counts_merged_{assignment}_{config}.tsv"
        ),
        getOutputProjectAssignmentConfig_helper(
            "results/experiments/{project}/stats/statistic_oligo_correlation_merged_{assignment}_{config}.tsv",
            True,
        ),
        getOutputProjectAssignmentConfig_helper(
            "results/experiments/{project}/stats/statistic_assigned_counts_single_{assignment}_{config}.tsv",
            True,
        ),
        getOutputProjectAssignmentConfig_helper(
            "results/experiments/{project}/stats/statistic_overlapBCs_assigned_counts_{assignment}_{config}.tsv",
            True,
        ),
        # variants
        getOutputVariants_helper(
            "results/experiments/{project}/stats/variants/{assignment}/{config}/correlation_variantTable.tsv",
            True,
        ),


rule all_experiments_counts_stats:
    input:
        getOutputProjectConditionReplicateType_helper(
            "results/experiments/{project}/stats/counts/freqUMIs_{condition}_{replicate}_{type}.txt"
        ),
        getOutputProjectConfig_helper(
            "results/experiments/{project}/stats/statistic_bc_correlation_merged_{config}.tsv",
            True,
        ),
        getOutputProjectConfig_helper(
            "results/experiments/{project}/stats/statistic_overlapBCs_counts_{config}.tsv",
            True,
        ),


rule all_experiments_assignments:
    input:
        getOutputProjectConditionAssignmentConfig_helper(
            "results/experiments/{project}/assigned_counts/{assignment}/{config}/{condition}_allreps_merged.tsv.gz"
        ),


rule all_experiments_assignments_stats:
    input:
        getOutputProjectAssignmentConfig_helper(
            "results/experiments/{project}/stats/statistic_assigned_counts_merged_{assignment}_{config}.tsv"
        ),
        getOutputProjectAssignmentConfig_helper(
            "results/experiments/{project}/stats/statistic_oligo_correlation_merged_{assignment}_{config}.tsv",
            True,
        ),
        getOutputProjectAssignmentConfig_helper(
            "results/experiments/{project}/stats/statistic_assigned_counts_single_{assignment}_{config}.tsv",
            True,
        ),
        getOutputProjectAssignmentConfig_helper(
            "results/experiments/{project}/stats/statistic_overlapBCs_assigned_counts_{assignment}_{config}.tsv",
            True,
        ),


rule all_stats_BCNucleotideComposition:
    input:
        getOutputProjectConditionReplicateType_helper(
            "results/experiments/{project}/stats/counts/BCNucleotideComposition/{condition}_{replicate}_{type}.tsv.gz"
        ),


###################
## SUB-WORKFLOWS ##
###################


# assignment workflow
include: "rules/assignment.smk"
# count workflow
include: "rules/counts.smk"
# assignimg BCs to oligos
include: "rules/assigned_counts.smk"
# all statistics
include: "rules/statistic.smk"
# variant subworkflow (creating variant effects)
include: "rules/variants.smk"
